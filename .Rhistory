# Read each file to a data frame, check if threshold  applies
# if yes, find correlation and add it to vector
correl <- numeric()
for (file in file_list){
df <- read.csv(file, header = TRUE)
if (sum(complete.cases(df)) > threshold){
correl <- c(correl,(cor(df$nitrate, df$sulfate, use = "complete")))
}
rm(df)
}
round(correl,5)
}
cr <- corr("specdata")
file_list <- list.files("specdata")
file_list
directory = "specdata"
file_list <- NULL
file_list
file_list <- list.files(directory)
file_list
correl <- numeric()
for (file in file_list){
df <- read.csv(file, header = TRUE)
if (sum(complete.cases(df)) > threshold){
correl <- c(correl,(cor(df$nitrate, df$sulfate, use = "complete")))
}
rm(df)
}
correl <- numeric()
for (file in file_list){
df <- read.csv(file, header = TRUE)
if (sum(complete.cases(df)) > threshold){
correl <- c(correl,(cor(df$nitrate, df$sulfate, use = "complete")))
}
rm(df)
}
source("corr.R")
cr <- corr("specdata")
cr
setwd("~/DataScience/RProgrammingWk2/Assignment1/specdata")
source("corr.R")
setwd("~/DataScience/RProgrammingWk2/Assignment1")
source("corr.R")
cr <- corr("specdata")
cr
file_list
rm(file_list)
file_list
directory ="specdata"
directory
file_list <- list.files(paste("~/DataScience/RProgrammingWk2/Assignment1/",directory))
file_list
paste("~/DataScience/RProgrammingWk2/Assignment1/",directory)
?paste
paste("~/DataScience/RProgrammingWk2/Assignment1/",directory, sep="")
source("corr.R")
cr <- corr("specdata")
file_list
file_list <- list.files(paste("~/DataScience/RProgrammingWk2/Assignment1/",directory, sep=""))
file_list
correl <- numeric()
for (file in file_list){
df <- read.csv(file, header = TRUE)
if (sum(complete.cases(df)) > threshold){
correl <- c(correl,(cor(df$nitrate, df$sulfate, use = "complete")))
}
rm(df)
}
fil_list
file_list
file_list <- list.files(paste("/",directory, sep=""))
# Read files one by one
# Read each file to a data frame, check if threshold  applies
# if yes, find correlation and add it to vector
correl <- numeric()
for (file in file_list){
df <- read.csv(file, header = TRUE)
if (sum(complete.cases(df)) > threshold){
correl <- c(correl,(cor(df$nitrate, df$sulfate, use = "complete")))
}
rm(df)
}
source("corr.R")
cr <- corr("specdata")
?file.choose
source("corr.R")
cr <- corr("specdata")
cr
source("submitscript1.R")
source("corr.R")
cr <- corr("specdata")
source("submitscript1.R")
submit()
submit()
submit()
submit()
install.packages("RMySQL")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type="source")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
?dbSendQuery
?fetch
affyMis
head(affyMis)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
dbClearResult(query);
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5),
c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
readA = h5read("example.h5","foo/A")
readB = h5read("example.h5","foo/foobaa/B")
readdf= h5read("example.h5","df")
readA
readB
readdf
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5","foo/A")
h5read("example.h5","foo/A",index=list(1:3,1))
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr); html2 = GET(url)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
pg2 = GET("http://httpbin.org/basic-auth/user/passwd",
authenticate("user","passwd"))
pg2
google = handle("http://google.com")
pg1 = GET(handle=google,path="/")
pg2 = GET(handle=google,path="search")
pg1
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
2
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "a4959efa4062fb10dffb")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "a4959efa4062fb10dffb")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
install.packages("httpuv")
library(httr)
library(httpuv)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "a4959efa4062fb10dffb")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
install.packages("jsonlite")
library(httr)
library(httpuv)
library(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "a4959efa4062fb10dffb")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httr)
library(httpuv)
library(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "a4959efa4062fb10dffb")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
?stop_for_status
?read.csv
library(sqldf)
acs = read.csv("getdata-data-ss06pid.csv", header = TRUE, sep = ",")
setwd("~/DataScience/GCD")
library(sqldf)
acs = read.csv("getdata-data-ss06pid.csv", header = TRUE, sep = ",")
sqldf("select * from acs where AGEP < 50 and pwgtp1")
library(RMySQL)
sqldf("select * from acs where AGEP < 50 and pwgtp1")
options(sqldf.driver = "SQLite") # as per FAQ #7 force SQLite
options(gsubfn.engine = "R") # as per FAQ #5 use R code rather than tcltk
library(sqldf)
library(RMySQL)
acs = read.csv("getdata-data-ss06pid.csv", header = TRUE, sep = ",")
sqldf("select * from acs where AGEP < 50 and pwgtp1")
df_sub = sqldf("select * from acs where AGEP < 50 and pwgtp1")
head(df_sub)
str(acs)
summary(acs)
acs_sub = sqldf("select pwgtp1 from acs")
head(acs_sub)
acs_sub = sqldf("select pwgtp1 from acs where AGEP < 50")
head(acs_sub)
acs_sub = sqldf("select * from acs where AGEP < 50 ")
head(acs_sub)
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
acs_sub1 = unique(acs$AGEP)
acs_sub2 = sqldf("select distinct AGEP from acs")
acs_sub1 == acs_sub2
all(acs_sub1 == acs_sub2)
acs_sub2  = sqldf("select unique AGEP from acs")
all(acs_sub1 == acs_sub2)
acs_sub2  = sqldf("select AGEP where unique from acs")
all(acs_sub1 == acs_sub2)
rm(acs_sub2)
cas_sub2
acs_sub2
acs_sub2  = sqldf("select unique AGEP from acs")
all(acs_sub1 == acs_sub2)
acs_sub2  = sqldf("select AGEP where unique from acs")
all(acs_sub1 == acs_sub2)
acs_sub2 = sqldf("select unique * from acs")
all(acs_sub1 == acs_sub2)
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
?nchar
nchar(htmlCode(10))
nchar(htmlCode[10,])
htmlCode
htmlCode[10,]
htmlCode[10]
nchar(htmlCode[10])
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
x <- read.fwf(file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(x)
x <- read.fwf(file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=3,
widths=c(9, 8,8,8,8))
head(x)
x <- read.fwf(file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=3,
widths=c(9, 8,8,8,8))
head(x)
x <- read.fwf(file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(9, 8,8,8,8))
head(x)
x <- read.fwf(file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(x)
sum(x[,4])
sum(x[,3])
sum(x[,5])
sum(x[,6])
rm(x)
x
x <- read.fwf(file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(x)
sum(x[,4])
x <- read.fwf(file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(x)
x <- read.fwf(file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4), method = "curl")
head(x)
?read.fwf
x <- read.fwf(file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4), method = "curl")
head(x)
head(x[,4])
head(x[,6])
sum(x[,6])
rm(x)
x <- read.fwf(file="getdata-wksst8110.for",
skip=4,
widths=c(11, 7,4, 9,4, 9,4, 9,4))
head(x)
sum(x[,4])
summary(x)
str(x)
sum(as.numeric(x[,4])
)
sum(as.numeric(x[,6])
)
rm(x)
x
x <- read.fwf(file="getdata-wksst8110.for",
skip=4,
widths=c(11, 7,4, 9,4, 9,4, 9,4))
head(x)
x <- read.fwf(file="getdata-wksst8110.for",
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(x)
sum(as.numeric(x[,4])
)
x
data(x)
data(airquality)
?data
?seed
?set.seed
x <- set.seed(1)
x
x <- set.seed(100)
x
file <- "activity.csv"
df <- read.csv(file, header = T, sep = ',')
setwd("/Users/apple/DataScience/RR/PA1/RepData_PeerAssessment1")
file <- "activity.csv"
df <- read.csv(file, header = T, sep = ',')
names(df)
str(df)
hist(df$steps, xlab = "Number of steps", main= "Total Number of Steps taken", col ="red")
head(df)
?hist
ist(df$steps[df$date], xlab = "Number of steps", main= "Total Number of Steps taken", col ="red")
hist(df$steps[df$date], xlab = "Number of steps", main= "Total Number of Steps taken", col ="red")
hist(df$steps[df$date], xlab = "Number of steps", main= "Total Number of Steps taken", col ="red")
hist(df$steps[as.numeric(df$date)], xlab = "Number of steps", main= "Total Number of Steps taken", col ="red")
require(lattice)
histogram(~df$steps | df$date, xlab = "Number of steps", main= "Total Number of Steps taken")
?histogram
require(lattice)
histogram(~df$steps | df$date, xlab = "Number of steps", main= "Total Number of Steps taken")
require(lattice)
histogram(df$steps[,df$date], xlab = "Number of steps", main= "Total Number of Steps taken")
require(lattice)
histogram(df$steps, xlab = "Number of steps", main= "Total Number of Steps taken", breaks = df$date)
require(lattice)
hist(df$steps, xlab = "Number of steps", main= "Total Number of Steps taken", breaks = df$date)
?hist
?aggregate
stepsbyDate = aggregate(steps ~ date, data = df, FUN = sum)
barplot(~steps.date$steps | df$date, xlab = "Date", ylab ="Steps" main= "Total Number of Steps taken per day")
?barplot
stepsbyDate = aggregate(steps ~ date, data = df, FUN = sum)
hist(stepsbyDate$steps, xlab = "Date", ylab ="Steps")
barplot(stepsbyDate, names.arg = stepsbyDate$date, xlab = "Date", ylab ="Steps")
barplot(stepsbyDate$steps, names.arg = stepsbyDate$date, xlab = "Date", ylab ="Steps")
?barplot
barplot(stepsbyDate$steps, names.arg = stepsbyDate$date, xlab = "Date", ylab ="Steps", col = "black")
head(stepsbyDate)
mean(stepsbyDate$steps)
median <- median(stepsbyDate$steps)
median <- med(stepsbyDate$steps)
?median
median
head(df)
stepsbyInterval = aggregate(steps ~ interval, data = df, FUN = mean)
head(stepsbyInterval)
stepsbyInterval = aggregate(steps ~ interval, data = df, FUN = mean, rm.na = TRUE)
head(stepsbyInterval)
head(df)
stepsbyInterval = aggregate(steps ~ interval, data = df, FUN = mean)
plot(stepsbyInterval, ylab="Average no of steps taken", xlab="Interval", type='l')
max(stepsbyInterval)
max(stepsbyInterval$steps)
stepsbyInterval[max(stepsbyInterval$steps)]
stepsbyInterval[max(stepsbyInterval$steps),]
stepsbyInterval[which.max(stepsbyInterval$steps),]
stepsbyInterval$interval[which.max(stepsbyInterval$steps),]
stepsbyInterval$interval[which.max(stepsbyInterval$steps)]
nrows(df$steps == NA)
nrow(df$steps == NA)
nrow(df$steps)
names(df)
?sapply
sapply(df, FUN = sum(is.na(df$steps)))
sapply(df, function(df$steps)  sum(is.na(df$steps)))
sum(is.na(df$steps))
